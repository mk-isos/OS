# N-Queens 문제와 멀티스레딩

## 개요

이 프로젝트는 N x N 체스판에 N개의 퀸을 서로 위협하지 않도록 배치하는 N-Queens 문제를 해결하는 멀티스레드 솔루션입니다. 이 구현은 pthreads를 사용하며 Producer-Consumer 패턴의 사용을 보여줍니다.

## 요구 사항

- GCC
- Make
- pthreads 라이브러리

## 파일 목록

- `nqueens.c`: N-Queens 솔루션을 구현한 메인 소스 코드 파일입니다.
- `stack.h`와 `stack.c`: 퀸 배치를 관리하기 위한 스택 구현입니다.
- `Makefile`: 프로젝트를 컴파일하고 빌드하는 스크립트입니다.
- `README.md`: 이 파일로, 개요와 사용 방법을 제공합니다.

## 컴파일 방법

프로젝트 디렉토리에서 다음 명령어를 실행하여 컴파일합니다:

```sh
make

##사용 방법
다음 명령어로 컴파일된 프로그램을 실행합니다:

./nqueens -n [퀸의 수] -t [스레드 수]

예:

./nqueens -n 15 -t 4

-n [퀸의 수]: 퀸의 수와 보드 크기를 지정합니다. 기본값은 4입니다.
-t [스레드 수]: 사용할 스레드 수를 지정합니다. 기본값은 4입니다.

##기능
pthreads를 사용한 멀티스레드 구현.
출력 작업 중 레이스 컨디션을 방지하기 위한 안전한 출력.
Ctrl+C를 눌렀을 때 찾은 해의 수를 출력하고 프로그램을 종료하는 기능.

##코드 구조
nqueens.c
초기화:
명령줄 인수를 파싱합니다.
필요한 구조체와 스레드를 초기화합니다.

작업 스레드:
각 스레드는 독립적으로 N-Queens 문제를 해결하려고 시도합니다.

유효성 검사:
현재 퀸 배치가 충돌이 없는지 확인합니다.

출력:
뮤텍스를 사용하여 해를 안전하게 출력합니다.

신호 처리:
Ctrl+C를 캡처하여 찾은 해의 수를 출력하고 정상적으로 종료합니다.

##정리
컴파일된 파일을 제거하려면 다음 명령어를 실행합니다:

make clean

##작성자
김문기


이 `README` 파일은 프로젝트에 대한 전반적인 설명과 사용법을 제공하며, 이를 통해 사용자들이 쉽게 프로젝트를 컴파일하고 실행할 수 있습니다.

